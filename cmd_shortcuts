###
### Run Docker container
###

GREEN='\033[0;32m'
RED='\033[0;31m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

drun() {
    xhost + > /dev/null

    DOCKER_ARGS=()
    POSITIONAL_ARGS=()
    USE_GPU=true
    PERSISTENT_CONTAINER=false

    # Default Docker arguments
    [[ "$OSTYPE" =~ ^darwin ]] && DOCKER_ARGS+=("-e DISPLAY=host.docker.internal:0") || DOCKER_ARGS+=("-e DISPLAY")
    DOCKER_ARGS+=("--privileged" "-it" "--network host" "-v /dev:/dev" "-e TERM=xterm-256color")

    # Mount /mnt if it exists
    [[ -d "/mnt" ]] && DOCKER_ARGS+=("-v /mnt:/mnt")
    # Process input arguments
    while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        --gpus)
            if [[ "$2" == "none" ]]; then
                USE_GPU=false
                shift 2;
            else
                DOCKER_ARGS+=("$1")
                DOCKER_ARGS+=("$2")
                shift 2;
            fi
            ;;
        -n|--name)
            CONTAINER_NAME="$2"
            PERSISTENT_CONTAINER=true
            shift 2;
            ;;
        -*|--*)
            if [[ "$2" =~ ^- ]]; then
                DOCKER_ARGS+=("$1")
                shift;
            else
                DOCKER_ARGS+=("$1")
                DOCKER_ARGS+=("$2")
                shift 2;
            fi
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done


    DOCKER_ARGS+=("-v $HOME:/home/_host_")

    if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
        echo "Wayland detected"
        WAYLAND_SOCKET_DIR=$(dirname $XDG_RUNTIME_DIR/$(echo $WAYLAND_DISPLAY))
        DOCKER_ARGS+=("-v $WAYLAND_SOCKET_DIR:$WAYLAND_SOCKET_DIR" "-e WAYLAND_DISPLAY=$WAYLAND_DISPLAY")
    else
        DOCKER_ARGS+=("-e DISPLAY")
        DOCKER_ARGS+=("-v /tmp/.X11-unix:/tmp/.X11-unix")
    fi

    # Set XDG_RUNTIME_DIR for both X11 and Wayland
    DOCKER_ARGS+=("-e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR")
    DOCKER_ARGS+=("-v $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR")

    if [[ $USE_GPU == true ]]; then
        DOCKER_ARGS+=("--gpus all" "-e NVIDIA_VISIBLE_DEVICES=all" "-e NVIDIA_DRIVER_CAPABILITIES=all" "-e NVIDIA_DISABLE_REQUIRE=True")
        nvidia_icd_json=$(find /usr/share /etc -path '*/vulkan/icd.d/nvidia_icd.json' -type f 2>/dev/null | grep .) || (echo "nvidia_icd.json not found" >&2 && false)
        DOCKER_ARGS+=("-v $nvidia_icd_json:$nvidia_icd_json" "-v /etc/vulkan/implicit_layer.d/nvidia_layers.json:/etc/vulkan/implicit_layer.d/nvidia_layers.json" "-v /usr/share/glvnd/egl_vendor.d/10_nvidia.json:/usr/share/glvnd/egl_vendor.d/10_nvidia.json")
    fi

    if [[ $PERSISTENT_CONTAINER == false ]]; then
        DOCKER_ARGS+=("--rm")
        CONTAINER_NAME="${CONTAINER_NAME:-$(date +\%s)}"
        echo -e "${YELLOW}Initializing disposable container${NC}"
    else
        echo -e"${GREEN}Saving container under: $CONTAINER_NAME${NC}"
    fi
    DOCKER_ARGS+=("--name $CONTAINER_NAME")

    IMAGE_NAME="${POSITIONAL_ARGS[0]}"
    # POSITIONAL_ARGS=("${POSITIONAL_ARGS[@]:1}")

    INITIAL_CMD=$( $SHELL -c "docker inspect --format='{{json .Config.Cmd}}' $IMAGE_NAME" )
    
    while IFS= read -r line; do
        INITIAL_CMD_ARRAY+=("$line")
    done < <(echo "$INITIAL_CMD" | jq -r '.[]')

    EXTRA_CMD=()
    EXTRA_CMD+=("ln -s /home/_host_/.ssh \\\$HOME/.ssh &&")
    EXTRA_CMD+=("mv \\\$HOME/.ssh/config \\\$HOME/.ssh/config.bak &&")
    EXTRA_CMD+=("echo -e \\\"\\\nPS1=\\\\\\\"🐋 \\\\\\\$PS1\\\\\\\"\\\" >> \\\$HOME/.bashrc &&")


    RUN_COMMAND="docker run ${DOCKER_ARGS[*]} $IMAGE_NAME \"/bin/bash\" \"-c\" \"${EXTRA_CMD[*]} ${INITIAL_CMD_ARRAY[*]}\""
    echo -e "${CYAN}Container initialized with following arguments:\n${GRAY}${RUN_COMMAND}${NC}"
    $SHELL -c "$RUN_COMMAND"

    # restore PS1
    exec $SHELL 
}


###
### Build Docker container
###

dbuild() {

    DOCKER_BUILD_ARGS=()

    # Map group and user id
    DOCKER_BUILD_ARGS+=("--network host")
    DOCKER_BUILD_ARGS+=("--build-arg USER_ID=$(id -u)")
	DOCKER_BUILD_ARGS+=("--build-arg GROUP_ID=$(id -g)")
    DOCKER_BUILD_ARGS+=("--ssh default")

    DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS[@]} $@ ;
}

###
### Attach shell
###

dshell() {

    xhost + > /dev/null

    STARTUP_CONFIG="/bin/bash"
    DOCKER_ARGS=()
    POSITIONAL_ARGS=()
    CONTAINER_NAME=""

    DOCKER_ARGS+=("-it")
    DOCKER_ARGS+=("-e DISPLAY")

    while [[ $# -gt 0 ]]; do
    case $1 in
        *|--*)
            if [[ "$2" =~ ^- ]]; then
                DOCKER_ARGS+=("$1")
                shift;
            else
                DOCKER_ARGS+=("$1")
                DOCKER_ARGS+=("$2")
                shift 2;
            fi
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
        esac
    done

    if [[ ! -z ${POSITIONAL_ARGS[0]} ]];
        then
            CONTAINER_NAME="${POSITIONAL_ARGS[0]}"
    fi;

    if [[ -z $CONTAINER_NAME ]];
        then
            CONTAINER_NAME=`docker container ls -a | awk 'NR==2 {print $NF}'`
            echo -e "${CYAN}No container name given; using recent container: $CONTAINER_NAME${NC}"
            POSITIONAL_ARGS+=("$CONTAINER_NAME")
    fi;

    CONTAINER_STATUS=`docker inspect -f "{{.State.Status}}" $CONTAINER_NAME`

    if [[ "$CONTAINER_STATUS" == "exited" ]];
        then
        echo -e "${CYAN}Container Status: exited; restarting...${NC}"
        docker start $CONTAINER_NAME
    fi;


    POSITIONAL_ARGS+=("$STARTUP_CONFIG")

    ATTACH_COMMAND="docker exec"\ ${DOCKER_ARGS[@]}\ ${POSITIONAL_ARGS[@]}

    ($SHELL -c "$ATTACH_COMMAND")
    # restore PS1
    exec $SHELL
}


if [[ "$SHELL" == "/bin/bash" ]];
    then
    function docker_alias_completion_wrapper {
    local completion_function="$1";
    local alias_name="$2";

    local func=$(cat <<EOT
    # Generate a new completion function name
    function _$alias_name() {
    # Start off like _docker()
    local previous_extglob_setting=\$(shopt -p extglob);
    shopt -s extglob;

    # Populate \$cur, \$prev, \$words, \$cword
    _get_comp_words_by_ref -n : cur prev words cword;

    # Declare and execute
    declare -F $completion_function >/dev/null && $completion_function;

    eval "\$previous_extglob_setting";
    return 0;}; 
EOT
    );
    eval "$func";

    # Register the alias completion function
    complete -F _$alias_name $alias_name
    }

    export -f docker_alias_completion_wrapper
    # load docker completion
    _completion_loader docker;

    # Register completion function
    docker_alias_completion_wrapper _docker_image_build dbuild

    # Register completion function
    docker_alias_completion_wrapper _docker_container_run_and_create drun

    # Register completion function
    docker_alias_completion_wrapper __docker_complete_containers_all dshell

elif [[ "$SHELL" == "/bin/zsh" ]];
    then
    source $HOME/.oh-my-zsh/plugins/docker/_docker;
    compdef __docker_complete_images drun;
    compdef __docker_complete_containers dshell;
fi;
